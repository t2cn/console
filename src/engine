#!/usr/bin/env php
<?php
/**
 * This file is part of T2-Engine.
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the MIT-LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @author    Tony<dev@t2engine.cn>
 * @copyright Tony<dev@t2engine.cn>
 * @link      https://www.t2engine.cn/
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 */
declare(strict_types=1);

use T2\Config;
use T2\Console\Command;
use T2\Util;
use App\Container;

if (!Phar::running()) {
    chdir(__DIR__);
}
require_once __DIR__ . '/vendor/autoload.php';

if (!$appConfigFile = config_path('app.php')) {
    throw new RuntimeException('Config file not found: app.php');
}
$appConfig = require $appConfigFile;

if ($timezone = $appConfig['default_timezone'] ?? '') {
    date_default_timezone_set($timezone);
}

if (!in_array($argv[1] ?? '', ['start', 'restart', 'stop', 'status', 'reload', 'connections'])) {
    require_once __DIR__ . '/vendor/t2cn/framework/src/App/bootstrap.php';
} else {
    if (class_exists('T2\App')) {
        T2\App::loadAllConfig(['route']);
    } else {
        Config::reload(config_path(), ['route', 'container']);
    }
}

$cli = new Command();
$cli->setName('T2 Engine cli');
$cli->installInternalCommands();

//if (is_dir($command_path = Util::guessPath(app_path(), '/command', true))) {
//    $cli->installCommands($command_path);
//}

foreach (config('plugin', []) as $firm => $projects) {
    if (isset($projects['app'])) {
        foreach (['', '/app'] as $app) {
            if ($command_str = Util::guessPath(base_path() . "/plugin/$firm{$app}", 'command')) {
                $command_path = base_path() . "/plugin/$firm{$app}/$command_str";
                $cli->installCommands($command_path, "plugin\\$firm" . str_replace('/', '\\', $app) . "\\$command_str");
            }
        }
    }
    foreach ($projects as $name => $project) {
        if (!is_array($project)) {
            continue;
        }
        foreach ($project['command'] ?? [] as $class_name) {
            $reflection = new ReflectionClass($class_name);
            if ($reflection->isAbstract()) {
                continue;
            }
            $properties = $reflection->getStaticProperties();
            $name       = $properties['defaultName'];
            if (!$name) {
                throw new RuntimeException("Command {$class_name} has no defaultName");
            }
            $description = $properties['defaultDescription'] ?? '';
            $command     = Container::get($class_name);
            $command->setName($name)->setDescription($description);
            $cli->add($command);
        }
    }
}

$cli->run();
